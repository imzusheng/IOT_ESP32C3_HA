# -*- coding: utf-8 -*-
"""
配置模块

所有配置项都在此文件中直接定义, 并附有详细说明。
通过 `get_config()` 函数可以安全地访问这些配置。
要修改配置, 直接编辑下面的 CONFIG 字典即可。
注释旨在帮助理解每个参数的用途、对项目的影响以及推荐的设定范围。
"""

import gc

# =============================================================================
# 配置数据 (唯一配置源)
# =============================================================================

CONFIG = {
    "daemon": {
        # 描述: 系统在进入安全模式或重启前, 允许累计的最大错误次数。
        # 影响: 这是一个容错机制, 避免因为瞬时或小概率的错误导致系统频繁重启。
        # 建议: 5-20 次。
        "max_error_count": 10,

        # 描述: 看门狗定时器(WDT)的超时时间, 单位为毫秒。
        # 影响: 如果主程序在指定时间内没有"喂狗"(feed), 看门狗将强制重启设备。这是防止固件死锁或主循环卡死的最后防线。
        # 建议: 60000-300000 毫秒, 必须远大于主循环的正常执行时间。
        "wdt_timeout": 120000,

        # 描述: 是否启用硬件看门狗。
        # 影响: 生产环境中强烈建议启用, 以保证设备在无人值守的情况下能从未知错误中自愈。开发调试时可关闭。
        # 建议: 生产环境 `True`, 开发环境 `False`。
        "wdt_enabled": True
    },
    "system": {
        # 描述: 主循环(main loop)的延迟时间, 单位为毫秒。
        # 影响: 这是主循环每次迭代的间隔, 直接影响系统的响应速度和CPU使用率。值越小响应越快, 但CPU占用越高, 也越耗电。
        # 建议: 100-1000 毫秒。
        "main_loop_delay": 50
    },
    "wifi": {
        # 描述: WiFi网络名称(SSID)
        # 影响: 设备将连接到指定的WiFi网络
        # 建议: 使用2.4GHz频段的WiFi网络
        "ssid": "Your_WiFi_Name",

        # 描述: WiFi密码
        # 影响: 用于连接WiFi网络的认证
        # 建议: 使用强密码保护网络安全
        "password": "Your_WiFi_Password"
    },
    "mqtt": {
        # 描述: MQTT服务器地址
        # 影响: 设备将连接到指定的MQTT服务器
        # 建议: 使用稳定的MQTT服务器地址
        "broker": "mqtt.example.com",

        # 描述: MQTT服务器端口
        # 影响: MQTT服务器的连接端口
        # 建议: 默认1883，SSL连接使用8883
        "port": 1883,

        # 描述: MQTT用户名
        # 影响: MQTT服务器的认证用户名
        "user": "",

        # 描述: MQTT密码
        # 影响: MQTT服务器的认证密码
        "password": "",

        # 描述: MQTT保持连接时间
        # 影响: 客户端与服务器之间的心跳间隔
        # 建议: 60-120秒
        "keepalive": 60
    },
    "ntp": {
        # 描述: NTP服务器地址
        # 影响: 设备将从此服务器同步时间
        # 建议: 使用可靠的NTP服务器
        "server": "pool.ntp.org",

        # 描述: NTP同步超时时间
        # 影响: 等待NTP响应的最长时间
        # 建议: 5-10秒
        "timeout": 5000
    }
}


# =============================================================================
# 配置访问接口
# =============================================================================

def get_config(section: str = None, key: str = None, default=None):
    """
    从模块内部的 CONFIG 字典中安全地获取配置值。

    Args:
        section (str, optional): 配置段名称。如果为None, 返回整个配置字典。
        key (str, optional): 配置键名。如果为None, 返回整个配置段。
        default: 默认值, 当指定的键不存在时返回。

    Returns:
        配置值或配置字典。
    """
    if section is None:
        return CONFIG

    section_data = CONFIG.get(section, {})

    if key is None:
        return section_data

    return section_data.get(key, default)

# =============================================================================
# 初始化
# =============================================================================

gc.collect()

# Configuration module loaded silently